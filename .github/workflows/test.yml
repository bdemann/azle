# This GitHub Action flow works as follows:
# Each directory in the examples and tests directory represents an example project and is intended to have tests that ensure the canisters contained in that example function properly.
# These tests are currently written in TypeScript and are intended to be run in a Node.js environment.
# This GitHub Action takes care of deploying to npm and GitHub.

name: Tests
on:
    push:
        branches:
            - main
    pull_request: # Runs on pull requests to any branch

jobs:
    determine-should-run-tests:
        name: Determine if tests should run
        runs-on: ubuntu-latest
        outputs:
            should-run-tests: ${{ steps.determine-should-run-tests.outputs.should-release == 'false' }}
        steps:
            - uses: actions/checkout@v4
            - id: determine-should-run-tests
              uses: ./.github/actions/should_release

    set-exclude-dirs:
        name: Set exclude directories
        runs-on: ubuntu-latest
        outputs:
            exclude-dirs: ${{ steps.set-exclude-dirs.outputs.exclude-dirs }}
        steps:
            - uses: actions/checkout@v4
            - uses: ./.github/actions/set_run_conditions
              id: set-conditions
            - name: Set exclude dirs
              id: set-exclude-dirs
              run: |
                  # Decode the base64 encoded conditions
                  CONDITIONS=$(echo "${{ steps.set-conditions.outputs.conditions }}" | base64 -d)

                  RELEASE_TESTS="${{ format('
                  tests/end_to_end/candid_rpc/class_syntax/new
                  tests/end_to_end/http_server/new
                  ') }}"

                  UNSTABLE_TESTS="${{ format('
                  examples/basic_bitcoin
                  examples/bitcoin_psbt
                  examples/ckbtc
                  tests/end_to_end/http_server/ethers_base
                  tests/end_to_end/http_server/http_outcall_fetch
                  tests/end_to_end/http_server/ic_evm_rpc
                  tests/property/candid_rpc/class_api/stable_b_tree_map
                  tests/property/candid_rpc/functional_api/stable_b_tree_map
                  tests/property/ic_api/performance_counter
                  tests/property/ic_api/instruction_counter
                  ') }}"

                  SLOW_TESTS="${{ format('
                  tests/end_to_end/candid_rpc/functional_syntax/ckbtc
                  tests/end_to_end/candid_rpc/class_syntax/bitcoin
                  tests/end_to_end/http_server/large_files
                  tests/end_to_end/http_server/open_value_sharing
                  tests/end_to_end/candid_rpc/class_syntax/stable_structures
                  tests/end_to_end/candid_rpc/functional_syntax/bitcoin
                  tests/end_to_end/candid_rpc/functional_syntax/composite_queries
                  tests/end_to_end/candid_rpc/functional_syntax/cross_canister_calls
                  tests/end_to_end/candid_rpc/functional_syntax/management_canister
                  tests/end_to_end/candid_rpc/functional_syntax/stable_structures
                  tests/end_to_end/http_server/autoreload
                  ') }}"

                  EXCLUDE_DIRS=""

                  if [[ "$(echo $CONDITIONS | jq -r .is_main_branch_push)" == "true" ]]; then
                      EXCLUDE_DIRS=""
                  fi

                  if [[ "$(echo $CONDITIONS | jq -r .is_main_branch_merge_from_release_push)" == "true" ]]; then
                      EXCLUDE_DIRS=""
                  fi

                  if [[ "$(echo $CONDITIONS | jq -r .is_release_branch_pr)" == "true" ]]; then
                      EXCLUDE_DIRS=""
                  fi

                  if [[ "$(echo $CONDITIONS | jq -r .is_feature_branch_pr)" == "true" ]]; then
                      EXCLUDE_DIRS="$RELEASE_TESTS $UNSTABLE_TESTS"
                  fi

                  if [[ "$(echo $CONDITIONS | jq -r .is_feature_branch_draft_pr)" == "true" ]]; then
                      EXCLUDE_DIRS="$RELEASE_TESTS $UNSTABLE_TESTS $SLOW_TESTS"
                  fi

                  EXCLUDE_DIRS=$(echo $EXCLUDE_DIRS | xargs)
                  echo "exclude-dirs=$EXCLUDE_DIRS" >> $GITHUB_OUTPUT

    get-example-test-infos:
        name: Get example test infos
        needs:
            - determine-should-run-tests
            - set-exclude-dirs
        if: ${{ needs.determine-should-run-tests.outputs.should-run-tests == 'true' }}
        runs-on: ubuntu-latest
        outputs:
            test-infos: ${{ steps.get-test-infos.outputs.test-infos }}
        steps:
            - uses: actions/checkout@v4
            - name: Get test infos
              id: get-test-infos
              uses: ./.github/actions/get_test_infos
              with:
                  directories: ./examples
                  exclude-dirs: ${{ needs.set-exclude-dirs.outputs.exclude-dirs }}

    get-test-infos-class-syntax:
        name: Get test infos for class syntax
        needs:
            - determine-should-run-tests
            - set-exclude-dirs
        if: ${{ needs.determine-should-run-tests.outputs.should-run-tests == 'true' }}
        runs-on: ubuntu-latest
        outputs:
            test-infos: ${{ steps.get-test-infos.outputs.test-infos }}
        steps:
            - uses: actions/checkout@v4
            - name: Get test infos
              id: get-test-infos
              uses: ./.github/actions/get_test_infos
              with:
                  directories: ./tests/end_to_end/candid_rpc/class_syntax
                  exclude-dirs: ${{ needs.set-exclude-dirs.outputs.exclude-dirs }}

    get-test-infos-functional-syntax:
        name: Get test infos for functional syntax
        needs:
            - determine-should-run-tests
            - set-exclude-dirs
        if: ${{ needs.determine-should-run-tests.outputs.should-run-tests == 'true' }}
        runs-on: ubuntu-latest
        outputs:
            test-infos: ${{ steps.get-test-infos.outputs.test-infos }}
        steps:
            - uses: actions/checkout@v4
            - name: Get test infos
              id: get-test-infos
              uses: ./.github/actions/get_test_infos
              with:
                  directories: ./tests/end_to_end/candid_rpc/functional_syntax
                  exclude-dirs: ${{ needs.set-exclude-dirs.outputs.exclude-dirs }}

    get-test-infos-http-server:
        name: Get test infos for http server
        needs:
            - determine-should-run-tests
            - set-exclude-dirs
        if: ${{ needs.determine-should-run-tests.outputs.should-run-tests == 'true' }}
        runs-on: ubuntu-latest
        outputs:
            test-infos: ${{ steps.get-test-infos.outputs.test-infos }}
        steps:
            - uses: actions/checkout@v4
            - name: Get test infos
              id: get-test-infos
              uses: ./.github/actions/get_test_infos
              with:
                  directories: ./tests/end_to_end/http_server
                  exclude-dirs: ${{ needs.set-exclude-dirs.outputs.exclude-dirs }}

    get-test-infos-class-api:
        name: Get test infos for class API
        needs:
            - determine-should-run-tests
            - set-exclude-dirs
        if: ${{ needs.determine-should-run-tests.outputs.should-run-tests == 'true' }}
        runs-on: ubuntu-latest
        outputs:
            test-infos: ${{ steps.get-test-infos.outputs.test-infos }}
        steps:
            - uses: actions/checkout@v4
            - name: Get test infos
              id: get-test-infos
              uses: ./.github/actions/get_test_infos
              with:
                  directories: ./tests/property/candid_rpc/class_api
                  exclude-dirs: ${{ needs.set-exclude-dirs.outputs.exclude-dirs }}

    get-test-infos-functional-api:
        name: Get test infos for functional API
        needs:
            - determine-should-run-tests
            - set-exclude-dirs
        if: ${{ needs.determine-should-run-tests.outputs.should-run-tests == 'true' }}
        runs-on: ubuntu-latest
        outputs:
            test-infos: ${{ steps.get-test-infos.outputs.test-infos }}
        steps:
            - uses: actions/checkout@v4
            - name: Get test infos
              id: get-test-infos
              uses: ./.github/actions/get_test_infos
              with:
                  directories: ./tests/property/candid_rpc/functional_api
                  exclude-dirs: ${{ needs.set-exclude-dirs.outputs.exclude-dirs }}

    get-test-infos-ic-api:
        name: Get test infos for IC API
        needs:
            - determine-should-run-tests
            - set-exclude-dirs
        if: ${{ needs.determine-should-run-tests.outputs.should-run-tests == 'true' }}
        runs-on: ubuntu-latest
        outputs:
            test-infos: ${{ steps.get-test-infos.outputs.test-infos }}
        steps:
            - uses: actions/checkout@v4
            - name: Get test infos
              id: get-test-infos
              uses: ./.github/actions/get_test_infos
              with:
                  directories: ./tests/property/ic_api
                  exclude-dirs: ${{ needs.set-exclude-dirs.outputs.exclude-dirs }}

    run-example-tests:
        needs:
            - determine-should-run-tests
            - get-example-test-infos
        if: ${{ needs.determine-should-run-tests.outputs.should-run-tests == 'true' }}
        uses: ./.github/workflows/run-test.yml
        with:
            test_infos: ${{ needs.get-example-test-infos.outputs.test-infos }}
            include_npm: ${{ (github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'Merge pull request') && contains(github.event.head_commit.message, 'demergent-labs/release--')) || contains(github.head_ref, 'release--') }}
            os: '["ubuntu-latest"]'
        secrets:
            ETHEREUM_URL: ${{ secrets.ETHEREUM_URL }}

    run-class-syntax-tests:
        needs:
            - determine-should-run-tests
            - get-test-infos-class-syntax
        if: ${{ needs.determine-should-run-tests.outputs.should-run-tests == 'true' }}
        uses: ./.github/workflows/run-test.yml
        with:
            test_infos: ${{ needs.get-test-infos-class-syntax.outputs.test-infos }}
            include_npm: ${{ (github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'Merge pull request') && contains(github.event.head_commit.message, 'demergent-labs/release--')) || contains(github.head_ref, 'release--') }}
            os: '["ubuntu-latest"]'
        secrets:
            ETHEREUM_URL: ${{ secrets.ETHEREUM_URL }}

    run-functional-syntax-tests:
        needs:
            - determine-should-run-tests
            - get-test-infos-functional-syntax
        if: ${{ needs.determine-should-run-tests.outputs.should-run-tests == 'true' }}
        uses: ./.github/workflows/run-test.yml
        with:
            test_infos: ${{ needs.get-test-infos-functional-syntax.outputs.test-infos }}
            include_npm: ${{ (github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'Merge pull request') && contains(github.event.head_commit.message, 'demergent-labs/release--')) || contains(github.head_ref, 'release--') }}
            os: '["ubuntu-latest"]'
        secrets:
            ETHEREUM_URL: ${{ secrets.ETHEREUM_URL }}

    run-http-server-tests:
        needs:
            - determine-should-run-tests
            - get-test-infos-http-server
        if: ${{ needs.determine-should-run-tests.outputs.should-run-tests == 'true' }}
        uses: ./.github/workflows/run-test.yml
        with:
            test_infos: ${{ needs.get-test-infos-http-server.outputs.test-infos }}
            include_npm: ${{ (github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'Merge pull request') && contains(github.event.head_commit.message, 'demergent-labs/release--')) || contains(github.head_ref, 'release--') }}
            os: '["ubuntu-latest"]'
        secrets:
            ETHEREUM_URL: ${{ secrets.ETHEREUM_URL }}

    run-class-api-tests:
        needs:
            - determine-should-run-tests
            - get-test-infos-class-api
        if: ${{ needs.determine-should-run-tests.outputs.should-run-tests == 'true' }}
        uses: ./.github/workflows/run-test.yml
        with:
            test_infos: ${{ needs.get-test-infos-class-api.outputs.test-infos }}
            include_npm: ${{ (github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'Merge pull request') && contains(github.event.head_commit.message, 'demergent-labs/release--')) || contains(github.head_ref, 'release--') }}
            os: '["ubuntu-latest"]'
        secrets:
            ETHEREUM_URL: ${{ secrets.ETHEREUM_URL }}

    run-functional-api-tests:
        needs:
            - determine-should-run-tests
            - get-test-infos-functional-api
        if: ${{ needs.determine-should-run-tests.outputs.should-run-tests == 'true' }}
        uses: ./.github/workflows/run-test.yml
        with:
            test_infos: ${{ needs.get-test-infos-functional-api.outputs.test-infos }}
            include_npm: ${{ (github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'Merge pull request') && contains(github.event.head_commit.message, 'demergent-labs/release--')) || contains(github.head_ref, 'release--') }}
            os: '["ubuntu-latest"]'
        secrets:
            ETHEREUM_URL: ${{ secrets.ETHEREUM_URL }}

    run-ic-api-tests:
        needs:
            - determine-should-run-tests
            - get-test-infos-ic-api
        if: ${{ needs.determine-should-run-tests.outputs.should-run-tests == 'true' }}
        uses: ./.github/workflows/run-test.yml
        with:
            test_infos: ${{ needs.get-test-infos-ic-api.outputs.test-infos }}
            include_npm: ${{ (github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'Merge pull request') && contains(github.event.head_commit.message, 'demergent-labs/release--')) || contains(github.head_ref, 'release--') }}
            os: '["ubuntu-latest"]'
        secrets:
            ETHEREUM_URL: ${{ secrets.ETHEREUM_URL }}

    check-test-success:
        name: Check Azle tests succeeded
        needs:
            [
                run-example-tests,
                run-class-syntax-tests,
                run-functional-syntax-tests,
                run-http-server-tests,
                run-class-api-tests,
                run-functional-api-tests,
                run-ic-api-tests
            ]
        runs-on: ubuntu-latest
        if: success()
        steps:
            - run: exit 0

    check-test-failure:
        name: Check Azle tests didn't fail
        needs:
            [
                run-example-tests,
                run-class-syntax-tests,
                run-functional-syntax-tests,
                run-http-server-tests,
                run-class-api-tests,
                run-functional-api-tests,
                run-ic-api-tests
            ]
        runs-on: ubuntu-latest
        if: failure()
        steps:
            - run: exit 1
