# This GitHub Action flow works as follows:
# Each directory in the examples and tests directory represents an example project and is intended to have tests that ensure the canisters contained in that example function properly.
# These tests are currently written in TypeScript and are intended to be run in a Node.js environment.
# This GitHub Action takes care of deploying to npm and GitHub.

name: Tests
on:
    push:
        branches:
            - main
    pull_request: # Runs on pull requests to any branch

jobs:
    set-run-conditions:
        name: Set run conditions
        runs-on: ubuntu-latest
        outputs:
            conditions: ${{ steps.set-conditions.outputs.conditions }}
        steps:
            - id: set-conditions
              run: |
                  CONDITIONS=$(jq -n \
                  --arg is_main_branch_push "${{ github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, 'demergent-labs/release--') }}" \
                  --arg is_main_branch_merge_from_release_push "${{ github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'demergent-labs/release--') }}" \
                  --arg is_release_branch_pr "${{ startsWith(github.head_ref, 'release--') }}" \
                  --arg is_feature_branch_pr "${{ !startsWith(github.head_ref, 'release--') && github.ref != 'refs/heads/main' && github.event.pull_request.draft == false }}" \
                  --arg is_feature_branch_draft_pr "${{ !startsWith(github.head_ref, 'release--') && github.ref != 'refs/heads/main' && github.event.pull_request.draft == true }}" \
                  '{
                    is_main_branch_push: $is_main_branch_push,
                    is_main_branch_merge_from_release_push: $is_main_branch_merge_from_release_push,
                    is_release_branch_pr: $is_release_branch_pr,
                    is_feature_branch_pr: $is_feature_branch_pr,
                    is_feature_branch_draft_pr: $is_feature_branch_draft_pr
                  }')
                  echo "conditions=$(echo $CONDITIONS | base64 -w 0)" >> $GITHUB_OUTPUT
            - run: echo ${{ steps.set-conditions.outputs.conditions }}

    determine-should-run-tests:
        name: Determine if tests should run
        runs-on: ubuntu-latest
        outputs:
            should-run-tests: ${{ steps.determine-should-run-tests.outputs.should-release == 'false' }}
        steps:
            - uses: actions/checkout@v4
            - id: determine-should-run-tests
              uses: ./.github/actions/should_release

    set-exclude-dirs:
        name: Set exclude directories
        needs:
            - set-run-conditions
        runs-on: ubuntu-latest
        outputs:
            exclude-dirs: ${{ steps.set-exclude-dirs.outputs.exclude-dirs }}
        steps:
            - name: Set exclude dirs
              id: set-exclude-dirs
              run: |
                  # Decode the base64 encoded conditions
                  CONDITIONS=$(echo "${{ needs.set-run-conditions.outputs.conditions }}" | base64 -d)

                  RELEASE_TESTS="${{ format('
                  tests/end_to_end/candid_rpc/class_syntax/new
                  tests/end_to_end/http_server/new
                  ') }}"

                  UNSTABLE_TESTS="${{ format('
                  examples/basic_bitcoin
                  examples/bitcoin_psbt
                  examples/ckbtc
                  tests/end_to_end/http_server/ethers_base
                  tests/end_to_end/http_server/http_outcall_fetch
                  tests/end_to_end/http_server/ic_evm_rpc
                  tests/property/candid_rpc/class_api/stable_b_tree_map
                  tests/property/candid_rpc/functional_api/stable_b_tree_map
                  tests/property/ic_api/performance_counter
                  tests/property/ic_api/instruction_counter
                  ') }}"

                  SLOW_TESTS="${{ format('
                  tests/end_to_end/candid_rpc/functional_syntax/ckbtc
                  tests/end_to_end/candid_rpc/class_syntax/bitcoin
                  tests/end_to_end/http_server/large_files
                  tests/end_to_end/http_server/open_value_sharing
                  tests/end_to_end/candid_rpc/class_syntax/stable_structures
                  tests/end_to_end/candid_rpc/functional_syntax/bitcoin
                  tests/end_to_end/candid_rpc/functional_syntax/composite_queries
                  tests/end_to_end/candid_rpc/functional_syntax/cross_canister_calls
                  tests/end_to_end/candid_rpc/functional_syntax/management_canister
                  tests/end_to_end/candid_rpc/functional_syntax/stable_structures
                  tests/end_to_end/http_server/autoreload
                  ') }}"

                  EXCLUDE_DIRS=""

                  if [[ "$(echo $CONDITIONS | jq -r .is_main_branch_push)" == "true" ]]; then
                      EXCLUDE_DIRS=""
                  fi

                  if [[ "$(echo $CONDITIONS | jq -r .is_main_branch_merge_from_release_push)" == "true" ]]; then
                      EXCLUDE_DIRS=""
                  fi

                  if [[ "$(echo $CONDITIONS | jq -r .is_release_branch_pr)" == "true" ]]; then
                      EXCLUDE_DIRS=""
                  fi

                  if [[ "$(echo $CONDITIONS | jq -r .is_feature_branch_pr)" == "true" ]]; then
                      EXCLUDE_DIRS="$RELEASE_TESTS $UNSTABLE_TESTS"
                  fi

                  if [[ "$(echo $CONDITIONS | jq -r .is_feature_branch_draft_pr)" == "true" ]]; then
                      EXCLUDE_DIRS="$RELEASE_TESTS $UNSTABLE_TESTS $SLOW_TESTS"
                  fi

                  EXCLUDE_DIRS=$(echo $EXCLUDE_DIRS | xargs)
                  echo "exclude-dirs=$EXCLUDE_DIRS" >> $GITHUB_OUTPUT

    get-example-test-infos:
        name: Get example test infos
        needs:
            - determine-should-run-tests
            - set-exclude-dirs
        if: ${{ needs.determine-should-run-tests.outputs.should-run-tests == 'true' }}
        runs-on: ubuntu-latest
        outputs:
            test-infos: ${{ steps.get-test-infos.outputs.test-infos }}
        steps:
            - uses: actions/checkout@v4
            - id: get-node-version
              uses: ./.github/actions/get_node_version
            - name: Get test infos
              id: get-test-infos
              uses: ./.github/actions/get_test_infos
              with:
                  node-version: ${{ steps.get-node-version.outputs.node-version }}
                  directories: ./examples
                  exclude-dirs: ${{ needs.set-exclude-dirs.outputs.exclude-dirs }}

    get-test-test-infos:
        name: Get test test infos
        needs:
            - determine-should-run-tests
            - set-exclude-dirs
        if: ${{ needs.determine-should-run-tests.outputs.should-run-tests == 'true' }}
        runs-on: ubuntu-latest
        outputs:
            test-infos: ${{ steps.get-test-infos.outputs.test-infos }}
        steps:
            - uses: actions/checkout@v4
            - id: get-node-version
              uses: ./.github/actions/get_node_version
            - name: Get test infos
              id: get-test-infos
              uses: ./.github/actions/get_test_infos
              with:
                  node-version: ${{ steps.get-node-version.outputs.node-version }}
                  directories: ./tests
                  exclude-dirs: ${{ needs.set-exclude-dirs.outputs.exclude-dirs }}

    run-example-tests:
        needs:
            - determine-should-run-tests
            - get-example-test-infos
            - set-run-conditions
        if: ${{ needs.determine-should-run-tests.outputs.should-run-tests == 'true' }}
        uses: ./.github/workflows/run-test.yml
        with:
            test_infos: ${{ needs.get-example-test-infos.outputs.test-infos }}
            include_npm: ${{ (github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'Merge pull request') && contains(github.event.head_commit.message, 'demergent-labs/release--')) || contains(github.head_ref, 'release--') }}
            os: '["ubuntu-latest"]'
            conditions: ${{ needs.set-run-conditions.outputs.conditions }}
        secrets:
            ETHEREUM_URL: ${{ secrets.ETHEREUM_URL }}

    run-test-tests:
        needs:
            - determine-should-run-tests
            - get-test-test-infos
            - set-run-conditions
        if: ${{ needs.determine-should-run-tests.outputs.should-run-tests == 'true' }}
        uses: ./.github/workflows/run-test.yml
        with:
            test_infos: ${{ needs.get-test-test-infos.outputs.test-infos }}
            include_npm: ${{ (github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'Merge pull request') && contains(github.event.head_commit.message, 'demergent-labs/release--')) || contains(github.head_ref, 'release--') }}
            os: '["ubuntu-latest"]'
            conditions: ${{ needs.set-run-conditions.outputs.conditions }}
        secrets:
            ETHEREUM_URL: ${{ secrets.ETHEREUM_URL }}

    # These final jobs are designed to ensure that all jobs spun up from the matrix in the run-test have succeeded
    check-test-success:
        name: Check Azle tests succeeded
        needs: [run-example-tests, run-test-tests]
        runs-on: ubuntu-latest
        if: success()
        steps:
            - run: exit 0

    check-test-failure:
        name: Check Azle tests didn't fail
        needs: [run-example-tests, run-test-tests]
        runs-on: ubuntu-latest
        if: failure()
        steps:
            - run: exit 1
