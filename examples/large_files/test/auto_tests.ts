import { describe } from '@jest/globals';
import { please, Test } from 'azle/test/jest';

import { Unit } from '../../../scripts/file_generator';
import { generateTestFileOfSize } from './generate_test_files';
import { getAutoGeneratedFileName, verifyUpload } from './tests';

const autoGenAutoUploadTests: [number, Unit][] = [
    // Edge Cases
    [0, 'B'],
    [1, 'B'],
    [120 * 1024 * 1024 + 1, 'B'], // One more byte than can be processed in a single hash_file_by_parts call
    [2_000_000 + 1, 'B'], // One more byte that the message chunk size

    // General Cases
    // TODO Add tests for huge files after https://github.com/wasm-forge/stable-fs/issues/2 is resolved
    [1, 'KiB'],
    [10, 'KiB'],
    [100, 'KiB'],
    [1, 'MiB'],
    [10, 'MiB'],
    [100, 'MiB'],
    [250, 'MiB'],
    [1, 'GiB']
];

const permanentFilesTests: [string][] = [
    // Permanent Assets
    ['photos/people/george-washington.tif'],
    ['photos/places/dinosaurNM.jpg'],
    ['photos/places/slc.jpg'],
    ['photos/things/book.jpg'],
    ['photos/things/utah-teapot.jpg'],
    ['text/subfolder/deep-sub-folder/deep.txt'],
    ['text/subfolder/sibling-deep-sub-folder/deep.txt'],
    ['text/subfolder/other-thing.txt'],
    ['text/thing.txt'],
    ['text/thing.txt']
];

const fileRenameDuringUploadTests: [string, string][] =
    // TODO this is a bit of a pickle one
    [['text/single.txt', 'single_asset.txt']];

export function generateFiles(): Test {
    return () => {
        describe.each(autoGenAutoUploadTests)(
            'prepare auto generated files locally for upload',
            (size, units) => {
                please(
                    `generate file: ${getAutoGeneratedFileName(size, units)}`,
                    async () => {
                        await generateTestFileOfSize(size, units);
                    },
                    5 * 60 * 1_000
                );
            }
        );
    };
}

/**
 * This suite of tests verifies the integrity and consistency of files that are
 * automatically uploaded to the canister as specified in the `dfx.json`
 * configuration.
 *
 * @param origin - The origin URL or path used in the tests.
 * @returns A suite of Jest tests.
 */
export function getDfxConfigFileTests(origin: string): Test {
    return () => {
        describe.each(permanentFilesTests)(
            'permanent files with same names locally as on canister',
            (canisterPath) => {
                verifyUpload(origin, canisterPath, 'permanent');
            }
        );

        describe.each(fileRenameDuringUploadTests)(
            'permanent files with different names locally than on canister',
            (canisterPath, localPath) => {
                verifyUpload(origin, canisterPath, undefined, localPath);
            }
        );

        describe.each(autoGenAutoUploadTests)(
            'auto generated files that were uploaded as canister was deployed',
            (size, units) => {
                const fileName = getAutoGeneratedFileName(size, units);
                verifyUpload(origin, fileName, 'auto');
            }
        );
    };
}
