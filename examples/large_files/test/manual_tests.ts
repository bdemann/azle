import { describe } from '@jest/globals';
import { expect, it, please, Test } from 'azle/test/jest';
import { execSync } from 'child_process';
import { join } from 'path';

import { Unit } from '../../../scripts/file_generator';
import { generateTestFileOfSize } from './generate_test_files';
import { getAutoGeneratedFileName, verifyUpload } from './tests';

export function manualTests(origin: string): Test {
    const autoGenManualUploadFileInfo: [number, Unit][] = [[150, 'MiB']];

    return () => {
        describe.each(autoGenManualUploadFileInfo)(
            'prepare auto generated files locally for manual upload',
            (size, units) => {
                const fileName = getAutoGeneratedFileName(size, units);
                please(
                    `generate file: ${fileName}`,
                    async () => {
                        await generateTestFileOfSize(size, units, 'manual');
                    },
                    5 * 60 * 1_000
                );
            }
        );

        describe.each(autoGenManualUploadFileInfo)(
            'initial manual upload of auto files',
            (size, units) => {
                const fileName = getAutoGeneratedFileName(size, units);
                it('manually uploads files via azle command', async () => {
                    execSync(
                        `npx azle upload-assets backend ${join(
                            'assets',
                            'manual',
                            fileName
                        )} assets/test150MiB`,
                        {
                            stdio: 'inherit'
                        }
                    );

                    const response = await fetch(
                        `${origin}/exists?path=assets/${fileName}`
                    );

                    expect(await response.json()).toBe(true);
                });
            }
        );

        describe.each(autoGenManualUploadFileInfo)(
            'initial manual upload of auto files',
            (size, units) => {
                const fileName = getAutoGeneratedFileName(size, units);
                verifyUpload(origin, 'manual', fileName);
            }
        );
    };
}
